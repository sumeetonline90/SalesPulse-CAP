sap.ui.define(["sap/ui/core/mvc/Controller","sap/m/MessageToast","sap/m/MessageBox","sap/ui/model/json/JSONModel","sap/m/Dialog","sap/m/Button","sap/m/Input","sap/m/DatePicker","sap/m/Select","sap/ui/core/Item"],(e,t,r,s,o,a,n,i,l,d)=>{"use strict";return e.extend("com.sap.salespulse.salespulseui.controller.Main",{onInit(){this.getView().setModel(new s,"viewModel");this.refreshSalesData();this.refreshChart()},onFileChange(e){const r=this.byId("fileUploader");const s=r.getDomRef();const o=s.querySelector('input[type="file"]');const a=this.byId("uploadButton");if(o&&o.files&&o.files.length>0){const e=o.files[0];a.setEnabled(true);t.show("File selected: "+e.name)}else{a.setEnabled(false)}},async onUpload(e){if(e&&e.preventDefault){e.preventDefault()}if(e&&e.stopPropagation){e.stopPropagation()}const r=this.byId("fileUploader");const s=r.getDomRef();const o=s.querySelector('input[type="file"]');if(!o||!o.files||o.files.length===0){t.show("Please select a file first");return}const a=o.files[0];if(!a.name.toLowerCase().endsWith(".xlsx")){t.show("Please select an Excel file (.xlsx)");return}t.show("Uploading file...");try{const e=await this.readFileAsBase64(a);const s=await fetch("/odata/v4/sales-service/",{method:"HEAD",headers:{"x-csrf-token":"Fetch"},credentials:"include"});const o=s.headers.get("x-csrf-token");if(!o){throw new Error("Failed to fetch CSRF token")}const n=await fetch("/odata/v4/sales-service/uploadExcel",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","x-csrf-token":o},credentials:"include",body:JSON.stringify({excel:e})});if(!n.ok){throw new Error(`HTTP ${n.status}: ${n.statusText}`)}const i=await n.json();const l=i.value||i||"File uploaded successfully!";t.show(l);const d=this.byId("salesTable");if(d){d.removeAllItems()}setTimeout(()=>{this.refreshSalesData()},1500);r.clear();this.byId("uploadButton").setEnabled(false)}catch(e){console.error("Upload error:",e);t.show("Upload failed: "+e.message)}},readFileAsBase64(e){return new Promise((t,r)=>{const s=new FileReader;s.onload=e=>{try{const r=e.target.result.split(",")[1];t(r)}catch(e){r(new Error("Error processing file: "+e.message))}};s.onerror=()=>{r(new Error("Error reading file"))};s.readAsDataURL(e)})},onTypeMissmatch(e){t.show("Please select an Excel file (.xlsx)")},onRefresh(){this.refreshSalesData()},async onAddSampleData(){try{const e=this.getView().getModel();const r=await e.callFunction("/addSampleData");if(r){t.show(r);await this.refreshSalesData();await this.refreshChart()}}catch(e){console.error("Error adding sample data:",e);t.show("Error adding sample data: "+e.message)}},async refreshSalesData(){try{const e=this.getView().getModel();const r=this.byId("salesTable");if(e&&r){r.removeAllItems();await e.refresh();const t=r.getBinding("items");if(t){t.refresh()}}else{t.show("Error: Unable to refresh data - model or table not found")}}catch(e){console.error("Error refreshing sales data:",e);t.show("Error refreshing data: "+e.message)}},onCreateOrder(){this._showOrderDialog()},onEditOrder(e){const t=e.getSource().getBindingContext();if(t){const e=t.getObject();this._showOrderDialog(e)}},onDeleteOrder(e){const t=e.getSource().getBindingContext();if(t){const e=t.getObject();r.confirm(`Are you sure you want to delete order ${e.OrderID}?`,{title:"Delete Order",onClose:t=>{if(t===r.Action.OK){this._deleteOrder(e)}}})}},_showOrderDialog(e=null){const t=!!e;const r=new o({title:t?"Edit Order":"Create New Order",contentWidth:"500px",content:[new n({id:"orderIdInput",placeholder:"Order ID",value:e?.OrderID||"",enabled:!t}),new n({id:"regionInput",placeholder:"Region",value:e?.Region||""}),new n({id:"countryInput",placeholder:"Country",value:e?.Country||""}),new n({id:"productInput",placeholder:"Product",value:e?.Product||""}),new n({id:"revenueInput",placeholder:"Revenue",value:e?.Revenue||"",type:"Number"}),new i({id:"orderDateInput",placeholder:"Order Date",value:e?.OrderDate||new Date})],beginButton:new a({text:t?"Update":"Create",type:"Emphasized",press:()=>{this._saveOrder(e);r.close()}}),endButton:new a({text:"Cancel",press:()=>r.close()})});r.open()},async _saveOrder(e){try{const r=this.byId("orderIdInput").getValue();const s=this.byId("regionInput").getValue();const o=this.byId("countryInput").getValue();const a=this.byId("productInput").getValue();const n=parseFloat(this.byId("revenueInput").getValue());const i=this.byId("orderDateInput").getValue();if(!r||!s||!o||!a||!n||!i){t.show("Please fill in all fields");return}const l={OrderID:r,Region:s,Country:o,Product:a,Revenue:n,OrderDate:i};const d=this.getView().getModel();if(e){await d.update(`/SalesOrders(${e.ID})`,l);t.show("Order updated successfully")}else{await d.create("/SalesOrders",l);t.show("Order created successfully")}await this.refreshSalesData();await this.refreshChart()}catch(e){console.error("Error saving order:",e);t.show("Error saving order: "+e.message)}},async _deleteOrder(e){try{const r=this.getView().getModel();await r.remove(`/SalesOrders(${e.ID})`);t.show("Order deleted successfully");await this.refreshSalesData();await this.refreshChart()}catch(e){console.error("Error deleting order:",e);t.show("Error deleting order: "+e.message)}},async onRefreshChart(){await this.refreshChart()},async refreshChart(){try{const e=this.getView().getModel();const t=await e.callFunction("/getGeographyData");if(t&&t.length>0){this._renderPieChart(t)}else{this._showNoDataMessage()}}catch(e){console.error("Error refreshing chart:",e);this._showNoDataMessage()}},_renderPieChart(e){const t=document.getElementById("chartContainer");if(!t)return;const r=e.reduce((e,t)=>e+parseFloat(t.totalRevenue),0);let s='<div style="display: flex; flex-wrap: wrap; justify-content: center; align-items: center; height: 100%;">';e.forEach((e,t)=>{const o=(parseFloat(e.totalRevenue)/r*100).toFixed(1);const a=["#FF6B6B","#4ECDC4","#45B7D1","#96CEB4","#FFEAA7","#DDA0DD","#98D8C8","#F7DC6F"];const n=a[t%a.length];s+=`\n                    <div style="display: flex; flex-direction: column; align-items: center; margin: 10px; padding: 15px; border-radius: 10px; background: ${n}20; border: 2px solid ${n}; min-width: 120px;">\n                        <div style="width: 40px; height: 40px; border-radius: 50%; background: ${n}; margin-bottom: 8px;"></div>\n                        <div style="font-weight: bold; font-size: 14px; color: #333; text-align: center;">${e.region}</div>\n                        <div style="font-size: 12px; color: #666; text-align: center;">${e.country}</div>\n                        <div style="font-weight: bold; font-size: 16px; color: #333; margin-top: 5px;">$${e.totalRevenue}</div>\n                        <div style="font-size: 12px; color: #666;">${o}%</div>\n                        <div style="font-size: 10px; color: #888;">${e.recordCount} orders</div>\n                    </div>\n                `});s+="</div>";t.innerHTML=s},_showNoDataMessage(){const e=document.getElementById("chartContainer");if(e){e.innerHTML=`\n                    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: #666;">\n                        <div style="font-size: 48px; margin-bottom: 16px;">ðŸ“Š</div>\n                        <div style="font-size: 18px; font-weight: bold; margin-bottom: 8px;">No Data Available</div>\n                        <div style="font-size: 14px; text-align: center;">Upload some sales data to see the geography distribution chart</div>\n                    </div>\n                `}}})});
//# sourceMappingURL=Main.controller.js.map