sap.ui.define(["sap/ui/core/mvc/Controller","sap/m/MessageToast","sap/ui/model/json/JSONModel"],(e,s,t)=>{"use strict";return e.extend("com.sap.salespulse.salespulseui.controller.Main",{onInit(){this.getView().setModel(new t,"viewModel")},onFileChange(e){const t=this.byId("fileUploader");const o=t.getDomRef();const r=o.querySelector('input[type="file"]');const a=this.byId("uploadButton");if(r&&r.files&&r.files.length>0){const e=r.files[0];a.setEnabled(true);s.show("File selected: "+e.name)}else{a.setEnabled(false)}},async onUpload(e){if(e&&e.preventDefault){e.preventDefault()}if(e&&e.stopPropagation){e.stopPropagation()}const t=this.byId("fileUploader");const o=t.getDomRef();const r=o.querySelector('input[type="file"]');if(!r||!r.files||r.files.length===0){s.show("Please select a file first");return}const a=r.files[0];if(!a.name.toLowerCase().endsWith(".xlsx")){s.show("Please select an Excel file (.xlsx)");return}s.show("Uploading file...");try{const e=await this.readFileAsBase64(a);const o=await fetch("/odata/v4/sales-service/",{method:"HEAD",headers:{"x-csrf-token":"Fetch"},credentials:"include"});const r=o.headers.get("x-csrf-token");if(!r){throw new Error("Failed to fetch CSRF token")}const l=await fetch("/odata/v4/sales-service/uploadExcel",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","x-csrf-token":r},credentials:"include",body:JSON.stringify({excel:e})});if(!l.ok){throw new Error(`HTTP ${l.status}: ${l.statusText}`)}const n=await l.json();const i=n.value||n||"File uploaded successfully!";s.show(i);const c=this.byId("salesTable");if(c){c.removeAllItems()}setTimeout(()=>{this.refreshSalesData()},1500);t.clear();this.byId("uploadButton").setEnabled(false)}catch(e){console.error("Upload error:",e);s.show("Upload failed: "+e.message)}},readFileAsBase64(e){return new Promise((s,t)=>{const o=new FileReader;o.onload=e=>{try{const t=e.target.result.split(",")[1];s(t)}catch(e){t(new Error("Error processing file: "+e.message))}};o.onerror=()=>{t(new Error("Error reading file"))};o.readAsDataURL(e)})},onTypeMissmatch(e){s.show("Please select an Excel file (.xlsx)")},onRefresh(){const e=this.byId("salesTable");const t=e.getBinding("items");if(t){t.refresh();s.show("Data refreshed")}else{const e=this.getView().getModel();if(e){e.refresh(true);s.show("Model refreshed")}}},async refreshSalesData(){try{const e=this.getView().getModel();const t=this.byId("salesTable");if(e&&t){t.removeAllItems();await e.refresh();const s=t.getBinding("items");if(s){s.refresh()}}else{s.show("Error: Unable to refresh data - model or table not found")}}catch(e){console.error("Error refreshing sales data:",e);s.show("Error refreshing data: "+e.message)}}})});
//# sourceMappingURL=Main.controller.js.map